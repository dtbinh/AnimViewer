Computer Graphics project 4: ray tracing

Author: Yantong Liu
Email : yantongl@andrew.cmu.edu
Date  : Apr. 8th, 2010

///////////////////////////////////////////////////////////////////////////////
// What I did
///////////////////////////////////////////////////////////////////////////////
Ray
1. Ray casting      *DONE*
2. Shadow ray       *DONE*
3. Reflection       *DONE*
4. Refracture       *DONE*
5. Bounding box 
        I tried to implement octree, but didn't success till the due day. So I
        just use a bounding box to avoid useless intersection test if the ray 
        do not hit the box.

///////////////////////////////////////////////////////////////////////////////
// Funtion & file I added/changed
///////////////////////////////////////////////////////////////////////////////
raytracer (folder)
    raytracer.hpp/cpp:  Added four functions to implement ray tracing algorithm.
    raycasting.hpp/cpp: Defined the triangle ray casting function used by both 
                        Model and Triangle. 
                        Also defined some interpolation functions, including
                        triangle barycentric interpolation, linear inter-
                        polation bilinear interpolation, and texture color 
                        interpolation.
scene (folder)
    hit_vertex_infor.hpp :  Define a structure to record all necessary 
                            intersection point information for ray tracing 
                            algorithm.
    bounding_box.hpp/cpp:   Defined a bounding box class, used to detect is a 
                            ray will hit the model in this box. 
    scene.hpp/cpp:  Added a virtual function in Geometry for all geometries
                    intersection test. Also add transformatin matrix in 
                    Geometry for instancing.
    model.hpp/cpp:      Implemented ray casting function.
    triangle.hpp/cpp:   Implemented ray casting function.
    sphere.hpp/cpp:     Implemented ray casting function.



